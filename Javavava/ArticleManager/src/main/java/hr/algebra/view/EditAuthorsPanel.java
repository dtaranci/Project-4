/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Author;
import hr.algebra.model.JComponentInvisibleSettable;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.AuthorTableModel;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerListModel;
import javax.swing.table.TableColumn;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Derin
 */
public class EditAuthorsPanel extends javax.swing.JPanel implements JComponentInvisibleSettable {

    /**
     * Creates new form EditAuthorPanel
     */
    
    private AuthorTableModel model;
    
    public EditAuthorsPanel() {
        initComponents();
        init();
    }
    
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Repository repository;
    

    private Author selectedAuthor;

    private void init() {
        try {
            initValidation();
            hideErrors(errorLabels);
            initRepository();
            initTable();
            clearForm();
//            initComponentShownListener();
            initSpinner();
            
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

//    public void initComponentShownListener() {
//        //reload form on tab switch
//        addComponentListener(new ComponentAdapter() {
//            @Override
//            public void componentShown(ComponentEvent e) {
//                try {
//                    initTable();
//                } catch (Exception ex) {
//                    Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpAddOrUpdate = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAuthors = new javax.swing.JTable();
        btnRemoveAuthor = new javax.swing.JButton();
        tfNewAuthorName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddNewAuthor = new javax.swing.JButton();
        lbAuthorNameError = new javax.swing.JLabel();
        rbUpdateAuthor = new javax.swing.JRadioButton();
        rbAddNewAuthor = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnRefresh = new javax.swing.JButton();
        spSpinner = new javax.swing.JSpinner();
        btnSetFilter = new javax.swing.JButton();
        btnClearFilter = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1341, 799));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbAuthors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        tbAuthors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAuthorsMouseClicked(evt);
            }
        });
        tbAuthors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbAuthorsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbAuthors);

        btnRemoveAuthor.setText("Remove");
        btnRemoveAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAuthorActionPerformed(evt);
            }
        });

        jLabel1.setText("Author name");

        jLabel2.setText("Add / update author");

        btnAddNewAuthor.setText("Add / Update");
        btnAddNewAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewAuthorActionPerformed(evt);
            }
        });

        lbAuthorNameError.setForeground(new java.awt.Color(153, 0, 0));
        lbAuthorNameError.setText("X");

        btngrpAddOrUpdate.add(rbUpdateAuthor);
        rbUpdateAuthor.setSelected(true);
        rbUpdateAuthor.setText("Update");

        btngrpAddOrUpdate.add(rbAddNewAuthor);
        rbAddNewAuthor.setText("Add");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setMinimumSize(new java.awt.Dimension(10, 10));
        jSeparator1.setPreferredSize(new java.awt.Dimension(10, 10));

        btnRefresh.setText("Refresh table");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnSetFilter.setText("Filter");
        btnSetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFilterActionPerformed(evt);
            }
        });

        btnClearFilter.setText("Clear");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(rbAddNewAuthor)
                                .addGap(62, 62, 62)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(rbUpdateAuthor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbAuthorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(984, 984, 984))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfNewAuthorName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAddNewAuthor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(181, 181, 181)
                                .addComponent(btnRemoveAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefresh)
                                .addGap(114, 114, 114)
                                .addComponent(spSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSetFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClearFilter)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfNewAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(lbAuthorNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbAddNewAuthor)
                        .addComponent(rbUpdateAuthor))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewAuthor)
                    .addComponent(btnRemoveAuthor)
                    .addComponent(btnRefresh)
                    .addComponent(spSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetFilter)
                    .addComponent(btnClearFilter))
                .addGap(106, 106, 106))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbAuthorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAuthorsMouseClicked
        showAuthor();
    }//GEN-LAST:event_tbAuthorsMouseClicked

    private void tbAuthorsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbAuthorsKeyReleased
        showAuthor();
    }//GEN-LAST:event_tbAuthorsKeyReleased

    private void btnAddNewAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewAuthorActionPerformed
        
        if (!formValid()) {
            return;
        }
        
        else {
            String authorNameTf = tfNewAuthorName.getText().trim();
            if (rbUpdateAuthor.isSelected()) {

                try {
                    repository.updateAuthor(selectedAuthor.getId(), new Author(authorNameTf));
                } catch (Exception ex) {
                    Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if (rbAddNewAuthor.isSelected()) {
                try {
                    repository.createAuthor(new Author(authorNameTf));
                } catch (Exception ex) {
                    Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                initTable();
            } catch (Exception ex) {
                Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddNewAuthorActionPerformed

    private void btnRemoveAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAuthorActionPerformed
        if (selectedAuthor == null) {
            MessageUtils.showInformationMessage("Information", "Select an author first");
        }
        
        try {
            
            //implement number of articles in use for a particular author
            int count = repository.selectAuthorArticleCount(selectedAuthor.getId());
            
            if (count != 0) {
                MessageUtils.showErrorMessage("Author deletion failed", selectedAuthor.getName() + " is currently in use by: " + count + " article(s)");
                return;
            }
            
            repository.deleteAuthor(selectedAuthor.getId());
            
            clearForm();
            initTable();
            
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveAuthorActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        try {
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formComponentShown

    private void btnSetFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFilterActionPerformed
        var letterForFilter = spSpinner.getValue().toString().toUpperCase();
        Predicate<Author> letterFilter = author -> author.getName().toUpperCase().startsWith(letterForFilter);
        try {
            model = new AuthorTableModel(repository.selectAuthors().stream().filter(letterFilter).collect(Collectors.toList()));
            updateTable();
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSetFilterActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        try {
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnClearFilterActionPerformed

    private boolean formValid() {
        hideErrors(errorLabels);
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
        }
        return ok;
    }
        
    public void showAuthor() {
        int selectedRow = tbAuthors.getSelectedRow();
        
        int rowId = tbAuthors.convertRowIndexToModel(selectedRow);
        
        int id = (int) model.getValueAt(rowId, 0);
        
        Optional<Author> opt;
        try {
            
            opt = repository.selectAuthor(id);
            if (opt.isPresent()) {
                selectedAuthor = opt.get();
                fillForm(selectedAuthor);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewAuthor;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemoveAuthor;
    private javax.swing.JButton btnSetFilter;
    private javax.swing.ButtonGroup btngrpAddOrUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbAuthorNameError;
    private javax.swing.JRadioButton rbAddNewAuthor;
    private javax.swing.JRadioButton rbUpdateAuthor;
    private javax.swing.JSpinner spSpinner;
    private javax.swing.JTable tbAuthors;
    private javax.swing.JTextField tfNewAuthorName;
    // End of variables declaration//GEN-END:variables

    private void initValidation() {
        validationFields = Arrays.asList(
                tfNewAuthorName
        );
        errorLabels = Arrays.asList(
                lbAuthorNameError
        );
    }

    private void initRepository() {
        repository = RepositoryFactory.getInstance();
    }

    private void initTable() throws Exception {

        new Thread(() -> {
            try {
                model = new AuthorTableModel(repository.selectAuthors());
                java.awt.EventQueue.invokeLater(() -> {
                    try {
                        tbAuthors.setRowHeight(25);
                        tbAuthors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        tbAuthors.setAutoCreateRowSorter(true);
                        tbAuthors.setModel(model);
                        TableColumn column0 = tbAuthors.getColumnModel().getColumn(0);
                        column0.setPreferredWidth(50);
                        column0.setMinWidth(50);
                        column0.setMaxWidth(100);
                    } catch (Exception ex) {
                        Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            } catch (Exception ex) {
                Logger.getLogger(EditAuthorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();


    }
    

   private void clearForm() {
        hideErrors(errorLabels);
        validationFields.forEach(e -> e.setText(""));
        selectedAuthor = null;
    }

    private void fillForm(Author selectedAuthor) {
        if (rbUpdateAuthor.isSelected()) {
            tfNewAuthorName.setText(selectedAuthor.getName());
        }
    }

    private void initSpinner() {
        List<String> letters = IntStream.rangeClosed('A', 'Z')
                .mapToObj(c -> String.valueOf((char) c))
                .collect(Collectors.toList());
        spSpinner.setModel(new SpinnerListModel(letters));
        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) spSpinner.getEditor();
        editor.getTextField().setEditable(false);
    }

    private void updateTable() {
        tbAuthors.setRowHeight(25);
        tbAuthors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbAuthors.setAutoCreateRowSorter(true);
        tbAuthors.setModel(model);
        TableColumn column0 = tbAuthors.getColumnModel().getColumn(0);
        column0.setPreferredWidth(50);
        column0.setMinWidth(50);
        column0.setMaxWidth(100);
    }
}
