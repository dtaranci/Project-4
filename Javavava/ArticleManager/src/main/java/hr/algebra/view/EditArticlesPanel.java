/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Article;
import hr.algebra.model.Author;
import hr.algebra.model.AuthorAddable;
import hr.algebra.model.Category;
import hr.algebra.model.CategoryAddable;
import hr.algebra.model.JComponentInvisibleSettable;
import hr.algebra.utilities.DerinUtils;
import hr.algebra.utilities.FileUtils;
import hr.algebra.utilities.IconUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.ArticleTableModel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lecturerc10
 */
public class EditArticlesPanel extends javax.swing.JPanel implements AuthorAddable, CategoryAddable, JComponentInvisibleSettable {

    private final DefaultListModel<Author> authorsModel = new DefaultListModel<>();
    private final DefaultListModel<Category> categoriesModel = new DefaultListModel<>();
    /**
     * Creates new form UploadArticlesPanel
     */
    public EditArticlesPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbArticles = new javax.swing.JTable();
        lbIcon = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        lbPicturePathError = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lbLinkError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbDescError = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDesc = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lbPublishedDateError = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsArticleCategories = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsArticleAuthors = new javax.swing.JList<>();
        btnArticleAuthorAdd = new javax.swing.JButton();
        btnArticleAuthorRemove = new javax.swing.JButton();
        btnArticleCategoryAdd = new javax.swing.JButton();
        btnArticleCategoryRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbArticles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbArticles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbArticlesMouseClicked(evt);
            }
        });
        tbArticles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbArticlesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbArticles);

        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png"))); // NOI18N

        tfPicturePath.setEditable(false);

        lbPicturePathError.setForeground(new java.awt.Color(153, 0, 0));
        lbPicturePathError.setText("X");

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        jLabel2.setText("Title");

        lbTitleError.setForeground(new java.awt.Color(153, 0, 0));
        lbTitleError.setText("X");

        jLabel4.setText("Link");

        lbLinkError.setForeground(new java.awt.Color(153, 0, 0));
        lbLinkError.setText("X");

        jLabel6.setText("Description");

        lbDescError.setForeground(new java.awt.Color(153, 0, 0));
        lbDescError.setText("X");

        taDesc.setColumns(20);
        taDesc.setLineWrap(true);
        taDesc.setRows(5);
        jScrollPane2.setViewportView(taDesc);

        jLabel8.setText("Date");

        tfPublishedDate.setName("Date"); // NOI18N

        lbPublishedDateError.setForeground(new java.awt.Color(153, 0, 0));
        lbPublishedDateError.setText("X");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(lsArticleCategories);

        jScrollPane4.setViewportView(lsArticleAuthors);

        btnArticleAuthorAdd.setText("Add");
        btnArticleAuthorAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArticleAuthorAddActionPerformed(evt);
            }
        });

        btnArticleAuthorRemove.setText("Remove");
        btnArticleAuthorRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArticleAuthorRemoveActionPerformed(evt);
            }
        });

        btnArticleCategoryAdd.setText("Add");
        btnArticleCategoryAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArticleCategoryAddActionPerformed(evt);
            }
        });

        btnArticleCategoryRemove.setText("Remove");
        btnArticleCategoryRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArticleCategoryRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Authors");

        jLabel3.setText("Categories");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(235, 235, 235)
                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnArticleAuthorAdd)
                        .addGap(45, 45, 45)
                        .addComponent(btnArticleAuthorRemove))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnArticleCategoryAdd)
                        .addGap(45, 45, 45)
                        .addComponent(btnArticleCategoryRemove)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnChoose)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnChoose)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbDescError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnArticleAuthorAdd)
                                    .addComponent(btnArticleAuthorRemove))
                                .addGap(19, 19, 19)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAdd)
                                    .addComponent(btnUpdate))
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnArticleCategoryAdd)
                                    .addComponent(btnArticleCategoryRemove))))))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbArticlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbArticlesMouseClicked
        showArticle();
    }//GEN-LAST:event_tbArticlesMouseClicked

    private void tbArticlesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbArticlesKeyReleased
        showArticle();
    }//GEN-LAST:event_tbArticlesKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!formValid()) {
            return;
        }

        try {

            String localPath = uploadPicture();

            Article article = new Article(
                    tfTitle.getText().trim(),
                    tfLink.getText().trim(),
                    taDesc.getText().trim(),
                    localPath,
                    LocalDateTime.parse(
                            tfPublishedDate.getText().trim(),
                            Article.DATE_FORMATTER
                    ));

            repository.createArticle(article);

            model.setArticles(repository.selectArticles());

            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (isSelectedArticleNull()) return;
        if (!formValid()) {
            return;
        }

        try {

            if (!tfPicturePath.getText().trim()
                    .equals(selectedArticle.getPicturePath())) {

                if (selectedArticle.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedArticle.getPicturePath()));
                }

                String localPath = uploadPicture();
                selectedArticle.setPicturePath(localPath);
            }

            selectedArticle.setTitle(tfTitle.getText().trim());
            selectedArticle.setLink(tfLink.getText().trim());
            selectedArticle.setDescription(taDesc.getText().trim());
            
            selectedArticle.setPublishedDate(
                    LocalDateTime.parse(
                            tfPublishedDate.getText().trim(),
                            Article.DATE_FORMATTER
                    )
            );

            repository.updateArticle(selectedArticle.getId(), selectedArticle);

            model.setArticles(repository.selectArticles());

            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (isSelectedArticleNull()) return;

        try {
            if (selectedArticle.getPicturePath() != null) {
                Files.deleteIfExists(Paths.get(selectedArticle.getPicturePath()));
            }
            
            int selectedArticleId = selectedArticle.getId();
            
            List<Author> authors = repository.selectArticleAuthors(selectedArticleId);
            
            if (!authors.isEmpty()) {
                for (Author author : authors) {
                    repository.removeArticleAuthor(selectedArticleId, author.getId());
                }
            }
            
            List<Category> categories = repository.selectArticleCategories(selectedArticleId);

            if (!categories.isEmpty()) {
                for (Category category : categories) {
                    repository.removeArticleCategory(selectedArticleId, category.getId());
                }
            }

            
            
            repository.deleteArticle(selectedArticle.getId());
            
            

            model.setArticles(repository.selectArticles());

            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png").get(); // Optional<File>
        if (file == null) {
            return;
        }
        tfPicturePath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnArticleAuthorAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArticleAuthorAddActionPerformed
        if (isSelectedArticleNull()) return;
        try {
            //selectedArticle is not striclty needed in this constructor,
            //I just wanted to avoid the getArticleId() interface abstraction because
            //it would have to appear both in AuthorAddable and CategoryAddable which means it would have 
            //to be its own interface so this is just easier for such a basic function.
            new AddAuthorDialog(DerinUtils.getJFrameFromComponent(this).orElseThrow(NullPointerException::new), true, this).setVisible(true);
            
            showArticle();
            
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Dialog error", e.getMessage().toString());
        }
        
    }//GEN-LAST:event_btnArticleAuthorAddActionPerformed

    private void btnArticleAuthorRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArticleAuthorRemoveActionPerformed
        if (isSelectedArticleNull()) return;
        
        if (!authorsModel.isEmpty()) {
            var selectedAuthor = lsArticleAuthors.getSelectedValue();
            
            try {
                repository.removeArticleAuthor(selectedArticle.getId(), selectedAuthor.getId());
                
                showArticle();
                
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Remove author error", ex.getMessage().toString());
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnArticleAuthorRemoveActionPerformed

    private void btnArticleCategoryAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArticleCategoryAddActionPerformed
        if (isSelectedArticleNull()) return;
        
        try {
            new AddCategoryDialog(DerinUtils.getJFrameFromComponent(this).orElseThrow(NullPointerException::new), true, this).setVisible(true);

            showArticle();

        } catch (Exception e) {
            MessageUtils.showErrorMessage("Dialog error", e.getMessage().toString());
        }
    }//GEN-LAST:event_btnArticleCategoryAddActionPerformed

    private boolean isSelectedArticleNull() {
        
        if (selectedArticle == null) {
            //2025-01-26T18:25:15

            if (formValid()) {
                MessageUtils.showInformationMessage("Info", "Please add the new article to the database first");
            } else {
                MessageUtils.showInformationMessage("Info", "Please select an article or fill all the fields correctly");
            }

            return true;
        }

        return false;
    }

    private void btnArticleCategoryRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArticleCategoryRemoveActionPerformed
        if (isSelectedArticleNull()) return;
        if (!categoriesModel.isEmpty()) {
            var selectedCategory = lsArticleCategories.getSelectedValue();

            try {
                repository.removeArticleCategory(selectedArticle.getId(), selectedCategory.getId());

                showArticle();

            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Remove category error", ex.getMessage().toString());
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnArticleCategoryRemoveActionPerformed
    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private static final String DIR = "assets";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private Repository repository;
    private ArticleTableModel articleTableModel;

    private Article selectedArticle;

    private void init() {
        try {
            initValidation();
            hideErrors(errorLabels);
            initRepository();
            initTable();
            initListModels();
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle,
                tfLink,
                taDesc,
                tfPicturePath,
                tfPublishedDate
        );
        errorLabels = Arrays.asList(
                lbTitleError,
                lbLinkError,
                lbDescError,
                lbPicturePathError,
                lbPublishedDateError
        );
    }


    private boolean formValid() {
        hideErrors(errorLabels);
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(
                            validationFields.get(i).getText().trim(),
                            Article.DATE_FORMATTER
                    );
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setVisible(true);
                }

            }
        }
        return ok;
    }

    private void clearForm() {
        hideErrors(errorLabels);
        validationFields.forEach(e -> e.setText(""));
        lbIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_image.png")));
        selectedArticle = null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnArticleAuthorAdd;
    private javax.swing.JButton btnArticleAuthorRemove;
    private javax.swing.JButton btnArticleCategoryAdd;
    private javax.swing.JButton btnArticleCategoryRemove;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbDescError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbPicturePathError;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JList<Author> lsArticleAuthors;
    private javax.swing.JList<Category> lsArticleCategories;
    private javax.swing.JTextArea taDesc;
    private javax.swing.JTable tbArticles;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initRepository() {
        repository = RepositoryFactory.getInstance();
    }

    private ArticleTableModel model;

    private void initTable() throws Exception {

        new Thread(() -> {
            try {
                model = new ArticleTableModel(repository.selectArticles());
                java.awt.EventQueue.invokeLater(() -> {
                    try {
                        tbArticles.setRowHeight(25);
                        tbArticles.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        tbArticles.setAutoCreateRowSorter(true);
                        tbArticles.setModel(model);
                    } catch (Exception ex) {
                        Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            } catch (Exception ex) {
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();

    }

    private String uploadPicture() throws IOException {
        String source = tfPicturePath.getText().trim();
        String ext = source.substring(source.lastIndexOf("."));
        String name = UUID.randomUUID() + ext;

        String dest = DIR + File.separator + name;

        FileUtils.copy(source, dest);

        return dest;

    }

    private void showArticle() {
        int selectedRow = tbArticles.getSelectedRow();

        int rowId = tbArticles.convertRowIndexToModel(selectedRow);

        int id = (int) model.getValueAt(rowId, 0);

        try {

            Optional<Article> opt = repository.selectArticle(id);
            if (opt.isPresent()) {
                selectedArticle = opt.get();
                fillForm(selectedArticle);
                fillFormLists(selectedArticle);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void fillForm(Article article) {

        tfTitle.setText(article.getTitle());
        tfLink.setText(article.getLink());
        taDesc.setText(article.getDescription());
        tfPublishedDate.setText(article.getPublishedDate()
                .format(Article.DATE_FORMATTER));

        if (article.getPicturePath() != null
                && Files.exists(Paths.get(article.getPicturePath()))) {
            setIcon(lbIcon, new File(article.getPicturePath()));
            tfPicturePath.setText(article.getPicturePath());

        }

    }

    private void fillFormLists(Article selectedArticle) {

        initListModels();
        new Thread(() -> {
            try {
                Set<Author> authorsSet = selectedArticle.getAuthorsList();
                Set<Category> categoriesSet = selectedArticle.getCategoriesList();
                //sorting, convert to list because set cannot be sorted

                List<Author> authors = new ArrayList<Author>(authorsSet);
                List<Category> categories = new ArrayList<Category>(categoriesSet);

                Collections.sort(authors, Comparator.comparingInt(Author::getId));
                Collections.sort(categories, Comparator.comparingInt(Category::getId));
                java.awt.EventQueue.invokeLater(() -> {
                    try {
                        
                        authorsModel.addAll(authors);
                        categoriesModel.addAll(categories);
                        lsArticleAuthors.setModel(authorsModel);
                        lsArticleCategories.setModel(categoriesModel);
                    } catch (Exception ex) {
                        Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
            } catch (Exception ex) {
                Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();

    }

    private void initListModels() {
        authorsModel.clear();
        categoriesModel.clear();
    }

    @Override
    public void addAuthors(Set<Author> authors) {
        
       if (!authors.isEmpty()) {
           int article_Id = selectedArticle.getId();
           for (Author author : authors) {
               try {
                   repository.addArticleAuthor(article_Id, author.getId());
               } catch (Exception ex) {
                   Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
       }

    }

    @Override
    public void removeAuthors(Set<Author> authors) {
        if (!authors.isEmpty()) {
            int article_Id = selectedArticle.getId();
            for (Author author : authors) {
                try {
                    repository.removeArticleAuthor(article_Id, author.getId());
                } catch (Exception ex) {
                    Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    @Override
    public Set<Author> getAllAuthors() {
        try {
            return repository.selectAuthors().stream().collect(Collectors.toSet());
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //if it fails, return empty set
        Set<Author> emptyAuthorsSet = new HashSet<Author>();
        return emptyAuthorsSet;
    }

    @Override
    public Set<Author> getArticleAuthors() {
        try {
            return repository.selectArticleAuthors(selectedArticle.getId()).stream().collect(Collectors.toSet());
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        //if it fails, return empty set
        Set<Author> emptyAuthorsSet = new HashSet<Author>();
        return emptyAuthorsSet;
    }
    
    //////////////////////////

    @Override
    public void addCategories(Set<Category> categories) {
        
        if (!categories.isEmpty()) {
            int article_Id = selectedArticle.getId();
            for (Category category : categories) {
                try {
                    repository.addArticleCategory(article_Id, category.getId());
                } catch (Exception ex) {
                    Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
    }

    @Override
    public void removeCategories(Set<Category> categories) {
        
        if (!categories.isEmpty()) {
            int article_Id = selectedArticle.getId();
            for (Category category : categories) {
                try {
                    repository.removeArticleAuthor(article_Id, category.getId());
                } catch (Exception ex) {
                    Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    @Override
    public Set<Category> getAllCategories() {
        
        try {
            return repository.selectCategories().stream().collect(Collectors.toSet());
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        //if it fails, return empty set
        Set<Category> emptyCategoriesSet = new HashSet<Category>();
        return emptyCategoriesSet;
        
    }

    @Override
    public Set<Category> getArticleCategories() {
        
        try {
            return repository.selectArticleCategories(selectedArticle.getId()).stream().collect(Collectors.toSet());
        } catch (Exception ex) {
            Logger.getLogger(EditArticlesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        //if it fails, return empty set
        Set<Category> emptyCategoriesSet = new HashSet<Category>();
        return emptyCategoriesSet;
        
    }

}
