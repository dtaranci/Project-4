/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.GlobalValueStore;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.ValueStorageSingleton;
import hr.algebra.dal.sql.SqlRepository;
import hr.algebra.model.JComponentInvisibleSettable;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.model.ValueStorage;
import hr.algebra.utilities.MessageUtils;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Derin
 */
public class LoginDialog extends javax.swing.JDialog implements JComponentInvisibleSettable {

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    private Repository repository;
    private ValueStorage globalvaluestore;
    private User selectedUser;
    private Boolean registerState = false;
    /**
     * Creates new form LoginDialog
     */
    public LoginDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        hideRegistrationComponents();
        //center dialog
        setLocationRelativeTo(parent);
        init();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLoginTitle = new javax.swing.JLabel();
        lbUsername = new javax.swing.JLabel();
        lbPassword = new javax.swing.JLabel();
        tfUsername = new javax.swing.JTextField();
        lbUsernameError = new javax.swing.JLabel();
        lbPasswordError = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnRegister = new javax.swing.JButton();
        pfPassword = new javax.swing.JPasswordField();
        cbRole = new javax.swing.JComboBox<>();
        lbRole = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbLoginTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbLoginTitle.setText("Login");

        lbUsername.setText("Username:");

        lbPassword.setText("Password:");

        tfUsername.setText("jTextField1");

        lbUsernameError.setForeground(new java.awt.Color(153, 0, 0));
        lbUsernameError.setText("X");

        lbPasswordError.setForeground(new java.awt.Color(153, 0, 0));
        lbPasswordError.setText("X");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        pfPassword.setText("jPasswordField1");

        cbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbRole.setText("Role:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(lbLoginTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbUsername)
                                    .addComponent(lbPassword)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbRole)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbUsernameError)
                            .addComponent(lbPasswordError))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLogin, btnRegister});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pfPassword, tfUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lbLoginTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbUsername)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbUsernameError))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPassword)
                    .addComponent(lbPasswordError)
                    .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbRole))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnRegister))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if (!formValid()) {
            return;
        }
        
        //from Register form back to login, no action
        if (registerState) {
            ShowLogin();
            registerState = false;
            return;
        }
        try {
            //this logic can be done entirely in SQL, avoiding any sending of
            //username and password combinations to the client.
            //the username could be sent along with a password and the server could
            //reply with a boolean value with the ID_User and the Role_ID if it exists and is correct,
            //I am too tired to rework the sql for it and just want it to work.
            //
            //very insecure design, only for this project :)

            new Thread(() -> {
                try {
                    List<User> allUsers = repository.selectUsers();
                    java.awt.EventQueue.invokeLater(() -> {
                        try {
                            User dbUserFound;

                            //convert passwordfield to plaintext for check
                            String password = new String(pfPassword.getPassword());

                            User loginRequestee = new User(tfUsername.getText().trim(), password.trim());
                            if (allUsers.contains(loginRequestee)) {
                                dbUserFound = allUsers.get(allUsers.indexOf(loginRequestee));
                                globalvaluestore.setCurrentUserRole(Role.RoleType.fromValue(dbUserFound.getRole().getId()));
                                globalvaluestore.setCurrentUser(dbUserFound);
                                MessageUtils.showInformationMessage("Login success!", "Welcome " + dbUserFound.getUsername());
                                this.dispose();
                            } else {
                                MessageUtils.showErrorMessage("Login", "Credentials invalid");
                                errorLabels.forEach(x -> x.setVisible(true));
                                clearForm();
                            }
                        } catch (Exception ex) {
                            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    });
                } catch (Exception ex) {
                    Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();

        } catch (Exception ex) {
            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed

        //from Login form back to register, no action
        if (!registerState) {
            ShowRegister();
            registerState = true;
            return;
        }
        
        User userToInsert;
        Role roleToInsert;
        String password = new String(pfPassword.getPassword());
        var role = Role.RoleType.valueOf(cbRole.getSelectedItem().toString());
        String roleName = cbRole.getSelectedItem().toString();
        roleName = Character.toUpperCase(roleName.charAt(0)) + roleName.substring(1).toLowerCase();
        
        roleToInsert = new Role(globalvaluestore.getUSER_ROLE_ID(), roleName);
        
        if (role == Role.RoleType.ADMIN) {
            roleToInsert = new Role(globalvaluestore.getADMIN_ROLE_ID(), roleName);
        }
        userToInsert = new User(
                tfUsername.getText().trim(),
                password,
                roleToInsert
        );
        
        String userToInsertUsername = userToInsert.getUsername();
        
        //predicate
        Predicate<User> usernameExists = user -> user.getUsername().equalsIgnoreCase(userToInsertUsername);
        
        


        
        
        try {
            //select all users -> convert to stream for functional processing -> filter stream result with predicate -> find first match or none
            //Optional so never null
            Optional<User> existingUser = repository.selectUsers()
                                                    .stream()
                                                    .filter(usernameExists)
                                                    .findFirst();
            
            //user doesn't exist
            if (existingUser.isPresent())  {
                throw new Exception("Username already exists");
            }
            
            int dbUserId = repository.createUser(userToInsert);
            MessageUtils.showInformationMessage("Registration", "User: " + userToInsert.getUsername() + " registered! " + "Id: " + dbUserId);
            ShowLogin();
        } catch (Exception ex) {
            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Registration error", "An error was encountered during registration" + ex.getMessage().toString());
        }
        
        
    }//GEN-LAST:event_btnRegisterActionPerformed

    public void ShowRegister() {
        hideErrors(errorLabels);
        registerState = true;
        lbLoginTitle.setText("Register");
        lbRole.setVisible(true);
        cbRole.removeAllItems();
        
        //stream instead of for loop
        Arrays.stream(Role.RoleType.values()).forEach(x -> cbRole.addItem(x.toString()));
        
        cbRole.setVisible(true);
        
        btnLogin.setText("Back to login");
        btnRegister.setText("Register user");
    }
    
        public void ShowLogin() {
        hideErrors(errorLabels);
        registerState = false;
        lbLoginTitle.setText("Login");
        lbRole.setVisible(false);
        cbRole.setVisible(false);
        
        btnLogin.setText("Login");
        btnRegister.setText("Register");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginDialog dialog = new LoginDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox<String> cbRole;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbLoginTitle;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JLabel lbPasswordError;
    private javax.swing.JLabel lbRole;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JLabel lbUsernameError;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            hideErrors(errorLabels);
            initRepository();
            initGlobalValueStore();
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(LoginDialog.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the dialog");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfUsername, pfPassword
        );
        errorLabels = Arrays.asList(
                lbUsernameError, lbPasswordError
        );
    }

    private void initRepository() {
        repository = RepositoryFactory.getInstance();
    }

    private void clearForm() {
        //hideErrors(errorLabels);
        validationFields.forEach(e -> e.setText(""));
        selectedUser = null;
    }
    
    private boolean formValid() {
        hideErrors(errorLabels);
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setVisible(validationFields.get(i).getText().trim().isEmpty());
        }
        return ok;
    }

    private void initGlobalValueStore() {
        globalvaluestore = ValueStorageSingleton.getInstance();
    }

    private void hideRegistrationComponents() {
        lbRole.setVisible(false);
        cbRole.setVisible(false);
    }
}
