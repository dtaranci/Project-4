/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra;

import hr.algebra.dal.GlobalValueStore;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.dal.ValueStorageSingleton;
import hr.algebra.model.Role;
import hr.algebra.model.User;
import hr.algebra.model.ValueStorage;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.EditArticlesPanel;
import hr.algebra.view.EditAuthorsPanel;
import hr.algebra.view.EditCategoriesPanel;
import hr.algebra.view.LoginDialog;
import hr.algebra.view.UploadArticlesPanel;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.bind.JAXBException;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatLightLaf;
/**
 *
 * @author daniel.bele
 */
public class ArticleManager extends javax.swing.JFrame {

    /**
     * Creates new form ArticleManager
     */
    
    private static final String EDIT_ARTICLES = "Edit articles";
    private static final String UPLOAD_ARTICLES = "Upload articles";
    private static final String EDIT_AUTHORS = "Edit authors";
    private static final String EDIT_CATEGORIES = "Edit categories";
    private static final String XML_FILE_PREFIX = "src/main/resources/";
    private static final String XML_EXTENTION = ".xml";
    private Repository repository;
    private ValueStorage globalvaluestore;
    
    public ArticleManager() {
        //FlatLaf
        //initFlatLaf();
        initComponents();
        initGlobalValueStore();
        UserLogic();
        configurePanels();
        configureLookAndFeelMenuItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        mbMenuBar = new javax.swing.JMenuBar();
        menuNavigation = new javax.swing.JMenu();
        miUploadArticle = new javax.swing.JMenuItem();
        miArticle = new javax.swing.JMenuItem();
        miAuthor = new javax.swing.JMenuItem();
        miCategory = new javax.swing.JMenuItem();
        menuExportUser = new javax.swing.JMenu();
        miUser = new javax.swing.JMenuItem();
        menuAppearance = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        menuStatus = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Article manager");
        setPreferredSize(new java.awt.Dimension(1200, 880));

        menuNavigation.setMnemonic('N');
        menuNavigation.setText("Navigation");

        miUploadArticle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miUploadArticle.setMnemonic('L');
        miUploadArticle.setText("Upload Article");
        miUploadArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUploadArticleActionPerformed(evt);
            }
        });
        menuNavigation.add(miUploadArticle);

        miArticle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miArticle.setMnemonic('A');
        miArticle.setText("Article");
        miArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miArticleActionPerformed(evt);
            }
        });
        menuNavigation.add(miArticle);

        miAuthor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miAuthor.setMnemonic('U');
        miAuthor.setText("Author");
        miAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAuthorActionPerformed(evt);
            }
        });
        menuNavigation.add(miAuthor);

        miCategory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miCategory.setMnemonic('C');
        miCategory.setText("Category");
        miCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCategoryActionPerformed(evt);
            }
        });
        menuNavigation.add(miCategory);

        mbMenuBar.add(menuNavigation);

        menuExportUser.setMnemonic('E');
        menuExportUser.setText("Export");

        miUser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miUser.setMnemonic('U');
        miUser.setText("User");
        miUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUserActionPerformed(evt);
            }
        });
        menuExportUser.add(miUser);

        mbMenuBar.add(menuExportUser);

        menuAppearance.setMnemonic('A');
        menuAppearance.setText("Appearance");
        mbMenuBar.add(menuAppearance);

        jMenu1.setText("                                                   ");
        mbMenuBar.add(jMenu1);

        menuStatus.setText("Status");
        menuStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mbMenuBar.add(menuStatus);

        setJMenuBar(mbMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miArticleActionPerformed
        selectTab(EDIT_ARTICLES);
    }//GEN-LAST:event_miArticleActionPerformed

    private void miAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAuthorActionPerformed
        selectTab(EDIT_AUTHORS);
    }//GEN-LAST:event_miAuthorActionPerformed

    private void miCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCategoryActionPerformed
        selectTab(EDIT_CATEGORIES);
    }//GEN-LAST:event_miCategoryActionPerformed

    private void miUploadArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUploadArticleActionPerformed
        selectTab(UPLOAD_ARTICLES);
    }//GEN-LAST:event_miUploadArticleActionPerformed

    private void miUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miUserActionPerformed
                
        User user = globalvaluestore.getCurrentUser();
        if (user != null) {
            try {
                JAXBUtils.save(user, XML_FILE_PREFIX + user.getUsername().trim().replace(' ', '_') + XML_EXTENTION);
                MessageUtils.showInformationMessage(ArticleManager.class.getName(), "The current user: " + user.getUsername() + " was exported.");
            } catch (JAXBException ex) {
                Logger.getLogger(ArticleManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miUserActionPerformed

    public void selectTab(String tabTitle) {
        int tabIndex = tpContent.indexOfTab(tabTitle);
        
        //exists if the index is not -1
        if (tabIndex != -1) {
            tpContent.setSelectedIndex(tabIndex);
        } else {
            MessageUtils.showErrorMessage(ArticleManager.class.getName(), "Tab at index: " + tabIndex + " not found");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArticleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArticleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArticleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArticleManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArticleManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar mbMenuBar;
    private javax.swing.JMenu menuAppearance;
    private javax.swing.JMenu menuExportUser;
    private javax.swing.JMenu menuNavigation;
    private javax.swing.JMenu menuStatus;
    private javax.swing.JMenuItem miArticle;
    private javax.swing.JMenuItem miAuthor;
    private javax.swing.JMenuItem miCategory;
    private javax.swing.JMenuItem miUploadArticle;
    private javax.swing.JMenuItem miUser;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void configurePanels() {
        
        miUploadArticle.setVisible(false);
        
        
        var status = menuStatus;
        
        if (globalvaluestore.getCurrentUserRole() == Role.RoleType.ADMIN) {
            tpContent.add(UPLOAD_ARTICLES, new UploadArticlesPanel(status));
            miUploadArticle.setVisible(true);
        }
        
        tpContent.add(EDIT_ARTICLES, new EditArticlesPanel());
        tpContent.add(EDIT_AUTHORS, new EditAuthorsPanel());
        tpContent.add(EDIT_CATEGORIES, new EditCategoriesPanel());
        
        mbMenuBar.setVisible(true);
    }


    private void UserLogic() {
        
        mbMenuBar.setVisible(false);
        new LoginDialog(this, true).setVisible(true);
        
        if (globalvaluestore.getCurrentUserRole() == null) {
            MessageUtils.showErrorMessage("Login failed", "Nice try, application stopping.");
            System.exit(1);
        }
    }

    private void initRepository() {
        repository = RepositoryFactory.getInstance();
    }

    private void initGlobalValueStore() {
        globalvaluestore = ValueStorageSingleton.getInstance();
    }

    private void configureLookAndFeelMenuItem() {

        ButtonGroup bgGuiTheme = new ButtonGroup();
        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(x -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(x.getName());
            bgGuiTheme.add(mi);
            menuAppearance.add(mi);
            if ("Nimbus".equals(x.getName())) {
                mi.setSelected(true);
            }
            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(x.getClassName());
                    SwingUtilities.updateComponentTreeUI(ArticleManager.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(ArticleManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }

    private void initFlatLaf() {
        try {
            UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ArticleManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
